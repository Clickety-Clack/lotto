/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CreatorCollectionInterface extends ethers.utils.Interface {
  functions: {
    "SOCIAL_TOKEN_DECIMALS()": FunctionFragment;
    "SOCIAL_TOKEN_ID()": FunctionFragment;
    "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()": FunctionFragment;
    "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()": FunctionFragment;
    "SOCIAL_TOKEN_MAX_SUPPLY()": FunctionFragment;
    "SOCIAL_TOKEN_SUPPLY_PER_MONTH()": FunctionFragment;
    "admin()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "bidOnContent(uint256)": FunctionFragment;
    "contentCount()": FunctionFragment;
    "createContent(string,uint8)": FunctionFragment;
    "getAuctionStatus(uint256)": FunctionFragment;
    "getContent(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseSocialToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setWallet(address)": FunctionFragment;
    "socialTokenAvailableToMint()": FunctionFragment;
    "socialTokenHolders()": FunctionFragment;
    "socialTokenMaxSupply()": FunctionFragment;
    "socialTokenTotalSupply()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "wallet()": FunctionFragment;
    "withdrawToWallet()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SOCIAL_TOKEN_SUPPLY_PER_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bidOnContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createContent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseSocialToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "socialTokenAvailableToMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "socialTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "socialTokenMaxSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "socialTokenTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SOCIAL_TOKEN_SUPPLY_PER_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidOnContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseSocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialTokenAvailableToMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socialTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socialTokenMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socialTokenTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToWallet",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewNft(address,uint256,uint256,uint8,string)": EventFragment;
    "NftHighestBidder(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftHighestBidder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export class CreatorCollection extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CreatorCollectionInterface;

  functions: {
    SOCIAL_TOKEN_DECIMALS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_DECIMALS()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SOCIAL_TOKEN_ID(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_ID()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SOCIAL_TOKEN_INITIAL_MAX_SUPPLY(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SOCIAL_TOKEN_INITIAL_OWNER_BALANCE(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SOCIAL_TOKEN_MAX_SUPPLY(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SOCIAL_TOKEN_SUPPLY_PER_MONTH(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SOCIAL_TOKEN_SUPPLY_PER_MONTH()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    bidOnContent(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "bidOnContent(uint256)"(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    contentCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "contentCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    createContent(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createContent(string,uint8)"(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getAuctionStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getContent(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getContent(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    purchaseSocialToken(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseSocialToken()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWallet(
      newWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialTokenAvailableToMint(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "socialTokenAvailableToMint()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    socialTokenHolders(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "socialTokenHolders()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    socialTokenMaxSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "socialTokenMaxSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    socialTokenTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "socialTokenTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    wallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdrawToWallet(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  SOCIAL_TOKEN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "SOCIAL_TOKEN_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  SOCIAL_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  "SOCIAL_TOKEN_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

  SOCIAL_TOKEN_INITIAL_MAX_SUPPLY(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SOCIAL_TOKEN_INITIAL_OWNER_BALANCE(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SOCIAL_TOKEN_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "SOCIAL_TOKEN_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  SOCIAL_TOKEN_SUPPLY_PER_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  "SOCIAL_TOKEN_SUPPLY_PER_MONTH()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,uint256)"(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "balanceOfBatch(address[],uint256[])"(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  bidOnContent(
    id: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "bidOnContent(uint256)"(
    id: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  contentCount(overrides?: CallOverrides): Promise<BigNumber>;

  "contentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  createContent(
    ipfsAddress: string,
    dataType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createContent(string,uint8)"(
    ipfsAddress: string,
    dataType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAuctionStatus(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "getAuctionStatus(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  getContent(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  "getContent(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: number;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  purchaseSocialToken(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseSocialToken()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,uint256,bytes)"(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWallet(
    newWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWallet(address)"(
    newWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialTokenAvailableToMint(overrides?: CallOverrides): Promise<BigNumber>;

  "socialTokenAvailableToMint()"(overrides?: CallOverrides): Promise<BigNumber>;

  socialTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

  "socialTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

  socialTokenMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "socialTokenMaxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  socialTokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "socialTokenTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "uri(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  withdrawToWallet(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawToWallet()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    SOCIAL_TOKEN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_INITIAL_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SOCIAL_TOKEN_INITIAL_OWNER_BALANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SOCIAL_TOKEN_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_SUPPLY_PER_MONTH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_SUPPLY_PER_MONTH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    bidOnContent(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "bidOnContent(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "contentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    createContent(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createContent(string,uint8)"(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getAuctionStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getContent(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getContent(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: number;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    purchaseSocialToken(overrides?: CallOverrides): Promise<void>;

    "purchaseSocialToken()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallet(newWallet: string, overrides?: CallOverrides): Promise<void>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    socialTokenAvailableToMint(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenAvailableToMint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    socialTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

    socialTokenMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenMaxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    socialTokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;

    withdrawToWallet(overrides?: CallOverrides): Promise<void>;

    "withdrawToWallet()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ApprovalForAll(
      account: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    NewNft(
      creator: null,
      contentId: null,
      timestamp: null,
      dataType: null,
      ipfsAddress: null
    ): EventFilter;

    NftHighestBidder(
      creator: null,
      contentId: null,
      highestBidder: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TransferBatch(
      operator: string | null,
      from: string | null,
      to: string | null,
      ids: null,
      values: null
    ): EventFilter;

    TransferSingle(
      operator: string | null,
      from: string | null,
      to: string | null,
      id: null,
      value: null
    ): EventFilter;

    URI(value: null, id: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    SOCIAL_TOKEN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_ID()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_INITIAL_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SOCIAL_TOKEN_INITIAL_OWNER_BALANCE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SOCIAL_TOKEN_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "SOCIAL_TOKEN_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    SOCIAL_TOKEN_SUPPLY_PER_MONTH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SOCIAL_TOKEN_SUPPLY_PER_MONTH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidOnContent(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "bidOnContent(uint256)"(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    contentCount(overrides?: CallOverrides): Promise<BigNumber>;

    "contentCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    createContent(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createContent(string,uint8)"(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAuctionStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContent(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getContent(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseSocialToken(overrides?: PayableOverrides): Promise<BigNumber>;

    "purchaseSocialToken()"(overrides?: PayableOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWallet(newWallet: string, overrides?: Overrides): Promise<BigNumber>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialTokenAvailableToMint(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenAvailableToMint()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    socialTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

    socialTokenMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenMaxSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    socialTokenTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToWallet(overrides?: Overrides): Promise<BigNumber>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SOCIAL_TOKEN_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SOCIAL_TOKEN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_ID()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SOCIAL_TOKEN_INITIAL_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_INITIAL_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SOCIAL_TOKEN_INITIAL_OWNER_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_INITIAL_OWNER_BALANCE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SOCIAL_TOKEN_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SOCIAL_TOKEN_SUPPLY_PER_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SOCIAL_TOKEN_SUPPLY_PER_MONTH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,uint256)"(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfBatch(address[],uint256[])"(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidOnContent(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "bidOnContent(uint256)"(
      id: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    contentCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "contentCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createContent(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createContent(string,uint8)"(
      ipfsAddress: string,
      dataType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuctionStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContent(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContent(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseSocialToken(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseSocialToken()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,uint256,bytes)"(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWallet(
      newWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialTokenAvailableToMint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "socialTokenAvailableToMint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    socialTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "socialTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    socialTokenMaxSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "socialTokenMaxSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    socialTokenTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "socialTokenTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uri(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToWallet(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
