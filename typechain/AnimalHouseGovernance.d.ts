/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AnimalHouseGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "createCollection()": FunctionFragment;
    "creatorCollectionPrice()": FunctionFragment;
    "creatorCount()": FunctionFragment;
    "getCollectionByOwner(address)": FunctionFragment;
    "initialNftPrice()": FunctionFragment;
    "isAnimalHouseCollection(address)": FunctionFragment;
    "nftAuctionDuration()": FunctionFragment;
    "nftAuctionFee()": FunctionFragment;
    "nftAuctionStepMultipier()": FunctionFragment;
    "nftAuctionTokenTreshold()": FunctionFragment;
    "owner()": FunctionFragment;
    "payFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setCreatorCollectionPrice(uint256)": FunctionFragment;
    "setInitialNftPrice(uint256)": FunctionFragment;
    "setNftAuctionDuration(uint256)": FunctionFragment;
    "setNftAuctionFee(uint256)": FunctionFragment;
    "setNftAuctionStepMultipier(uint256)": FunctionFragment;
    "setNftAuctionTokenTreshold(uint256)": FunctionFragment;
    "setSocialTokenConversionRate(uint256)": FunctionFragment;
    "setWallet(address)": FunctionFragment;
    "socialTokenConversionRate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wallet()": FunctionFragment;
    "withdrawToWallet()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCollectionPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialNftPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAnimalHouseCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nftAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAuctionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAuctionStepMultipier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAuctionTokenTreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCreatorCollectionPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitialNftPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAuctionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAuctionStepMultipier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAuctionTokenTreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSocialTokenConversionRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setWallet", values: [string]): string;
  encodeFunctionData(
    functionFragment: "socialTokenConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToWallet",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCollectionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialNftPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAnimalHouseCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAuctionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAuctionStepMultipier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftAuctionTokenTreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCreatorCollectionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInitialNftPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAuctionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAuctionStepMultipier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAuctionTokenTreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSocialTokenConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socialTokenConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToWallet",
    data: BytesLike
  ): Result;

  events: {
    "NewCollection(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class AnimalHouseGovernance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AnimalHouseGovernanceInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "admin()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createCollection(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createCollection()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    creatorCollectionPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "creatorCollectionPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    creatorCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "creatorCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getCollectionByOwner(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getCollectionByOwner(address)"(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialNftPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "initialNftPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    isAnimalHouseCollection(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAnimalHouseCollection(address)"(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nftAuctionDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nftAuctionDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nftAuctionFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nftAuctionFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nftAuctionStepMultipier(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nftAuctionStepMultipier()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    nftAuctionTokenTreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nftAuctionTokenTreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    payFee(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "payFee()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCreatorCollectionPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCreatorCollectionPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInitialNftPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInitialNftPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftAuctionDuration(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftAuctionDuration(uint256)"(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftAuctionFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftAuctionFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftAuctionStepMultipier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftAuctionStepMultipier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftAuctionTokenTreshold(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftAuctionTokenTreshold(uint256)"(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSocialTokenConversionRate(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSocialTokenConversionRate(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWallet(
      newWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    socialTokenConversionRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "socialTokenConversionRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    withdrawToWallet(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  createCollection(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "createCollection()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  creatorCollectionPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "creatorCollectionPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  creatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  "creatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCollectionByOwner(
    ownerAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCollectionByOwner(address)"(
    ownerAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  initialNftPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "initialNftPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  isAnimalHouseCollection(
    collectionAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAnimalHouseCollection(address)"(
    collectionAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "nftAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  nftAuctionFee(overrides?: CallOverrides): Promise<BigNumber>;

  "nftAuctionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  nftAuctionStepMultipier(overrides?: CallOverrides): Promise<BigNumber>;

  "nftAuctionStepMultipier()"(overrides?: CallOverrides): Promise<BigNumber>;

  nftAuctionTokenTreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "nftAuctionTokenTreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  payFee(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "payFee()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCreatorCollectionPrice(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCreatorCollectionPrice(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInitialNftPrice(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInitialNftPrice(uint256)"(
    newPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftAuctionDuration(
    newDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftAuctionDuration(uint256)"(
    newDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftAuctionFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftAuctionFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftAuctionStepMultipier(
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftAuctionStepMultipier(uint256)"(
    newMultiplier: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftAuctionTokenTreshold(
    newTreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftAuctionTokenTreshold(uint256)"(
    newTreshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSocialTokenConversionRate(
    newRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSocialTokenConversionRate(uint256)"(
    newRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWallet(
    newWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWallet(address)"(
    newWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  socialTokenConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  "socialTokenConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wallet(overrides?: CallOverrides): Promise<string>;

  "wallet()"(overrides?: CallOverrides): Promise<string>;

  withdrawToWallet(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawToWallet()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    createCollection(overrides?: CallOverrides): Promise<boolean>;

    "createCollection()"(overrides?: CallOverrides): Promise<boolean>;

    creatorCollectionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorCollectionPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    creatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionByOwner(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCollectionByOwner(address)"(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    initialNftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "initialNftPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAnimalHouseCollection(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAnimalHouseCollection(address)"(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionStepMultipier(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionStepMultipier()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionTokenTreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionTokenTreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    payFee(overrides?: CallOverrides): Promise<void>;

    "payFee()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCreatorCollectionPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCreatorCollectionPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInitialNftPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInitialNftPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAuctionDuration(
      newDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftAuctionDuration(uint256)"(
      newDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAuctionFee(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftAuctionFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAuctionStepMultipier(
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftAuctionStepMultipier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAuctionTokenTreshold(
      newTreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftAuctionTokenTreshold(uint256)"(
      newTreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSocialTokenConversionRate(
      newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSocialTokenConversionRate(uint256)"(
      newRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWallet(newWallet: string, overrides?: CallOverrides): Promise<void>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    socialTokenConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenConversionRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wallet(overrides?: CallOverrides): Promise<string>;

    "wallet()"(overrides?: CallOverrides): Promise<string>;

    withdrawToWallet(overrides?: CallOverrides): Promise<void>;

    "withdrawToWallet()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    NewCollection(owner: null, collection: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    createCollection(overrides?: PayableOverrides): Promise<BigNumber>;

    "createCollection()"(overrides?: PayableOverrides): Promise<BigNumber>;

    creatorCollectionPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorCollectionPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    creatorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "creatorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionByOwner(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollectionByOwner(address)"(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialNftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "initialNftPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAnimalHouseCollection(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAnimalHouseCollection(address)"(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionFee(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionStepMultipier(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionStepMultipier()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftAuctionTokenTreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "nftAuctionTokenTreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    payFee(overrides?: PayableOverrides): Promise<BigNumber>;

    "payFee()"(overrides?: PayableOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCreatorCollectionPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCreatorCollectionPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInitialNftPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInitialNftPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftAuctionDuration(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftAuctionDuration(uint256)"(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftAuctionFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftAuctionFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftAuctionStepMultipier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftAuctionStepMultipier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftAuctionTokenTreshold(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftAuctionTokenTreshold(uint256)"(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSocialTokenConversionRate(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSocialTokenConversionRate(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWallet(newWallet: string, overrides?: Overrides): Promise<BigNumber>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    socialTokenConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "socialTokenConversionRate()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wallet(overrides?: CallOverrides): Promise<BigNumber>;

    "wallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawToWallet(overrides?: Overrides): Promise<BigNumber>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createCollection(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createCollection()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    creatorCollectionPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "creatorCollectionPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "creatorCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectionByOwner(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollectionByOwner(address)"(
      ownerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialNftPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialNftPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAnimalHouseCollection(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAnimalHouseCollection(address)"(
      collectionAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftAuctionDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAuctionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftAuctionFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAuctionStepMultipier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftAuctionStepMultipier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAuctionTokenTreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nftAuctionTokenTreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payFee(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "payFee()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCreatorCollectionPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCreatorCollectionPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInitialNftPrice(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInitialNftPrice(uint256)"(
      newPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftAuctionDuration(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftAuctionDuration(uint256)"(
      newDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftAuctionFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftAuctionFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftAuctionStepMultipier(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftAuctionStepMultipier(uint256)"(
      newMultiplier: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftAuctionTokenTreshold(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftAuctionTokenTreshold(uint256)"(
      newTreshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSocialTokenConversionRate(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSocialTokenConversionRate(uint256)"(
      newRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWallet(
      newWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWallet(address)"(
      newWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    socialTokenConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "socialTokenConversionRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wallet()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawToWallet(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawToWallet()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
