/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LotteryGeneratorInterface extends ethers.utils.Interface {
  functions: {
    "lotteries(uint256)": FunctionFragment;
    "createLottery(string,string,uint256,uint256)": FunctionFragment;
    "deleteLottery(address)": FunctionFragment;
    "getLotteries()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lotteries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteLottery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteries",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "lotteries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteries",
    data: BytesLike
  ): Result;

  events: {
    "LotteryCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LotteryCreated"): EventFragment;
}

export class LotteryGenerator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LotteryGeneratorInterface;

  functions: {
    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lotteries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createLottery(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLottery(string,string,uint256,uint256)"(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteLottery(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteLottery(address)"(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLotteries(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getLotteries()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;
  };

  lotteries(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "lotteries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createLottery(
    in_lotteryName: string,
    in_endAt: string,
    in_creatorFee: BigNumberish,
    in_coinsRequired: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLottery(string,string,uint256,uint256)"(
    in_lotteryName: string,
    in_endAt: string,
    in_creatorFee: BigNumberish,
    in_coinsRequired: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteLottery(
    lotteryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteLottery(address)"(
    lotteryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLotteries(overrides?: CallOverrides): Promise<string[]>;

  "getLotteries()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    lotteries(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "lotteries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createLottery(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createLottery(string,string,uint256,uint256)"(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteLottery(
      lotteryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteLottery(address)"(
      lotteryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLotteries(overrides?: CallOverrides): Promise<string[]>;

    "getLotteries()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    LotteryCreated(lotteryAddress: null): EventFilter;
  };

  estimateGas: {
    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lotteries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLottery(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLottery(string,string,uint256,uint256)"(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteLottery(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteLottery(address)"(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLotteries(overrides?: CallOverrides): Promise<BigNumber>;

    "getLotteries()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lotteries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lotteries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLottery(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLottery(string,string,uint256,uint256)"(
      in_lotteryName: string,
      in_endAt: string,
      in_creatorFee: BigNumberish,
      in_coinsRequired: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteLottery(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteLottery(address)"(
      lotteryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLotteries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLotteries()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
